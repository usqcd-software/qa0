(verbose [(c99 bgl/xlc) "/* $Id: defs-A.qa0 519 2008-04-05 04:07:43Z avp $ */"])
;;; A and A*
(define (S-compute-A-upper res-x mem-part scale-op madd-op
                           l-s s-1-size p-table src-x)
  (op nop (start S-compute-A-upper) () ())
  (op pointer-add () (src-L) ([reg src-x] [reg s-1-size]))
  (op pointer-move () (d) ([reg res-x]))
  (op pointer-move () (s) ([reg src-x]))
  (op pointer-move () (v&w) ([reg p-table]))
  (load mem-part () x ([reg src-L]))
  (loop () (i [const 0] [reg l-s])
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op scale-op () (y) ([reg v] [reg x]))
    (load mem-part () x ([reg s]))
    (op pointer-add () (s) ([reg s] [const (size-of Fermion)]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (size-of Fermion)])))
  (op nop (end S-compute-A-upper) () ()))

(define (S-compute-A-lower res-x mem-part scale-op madd-op
                           l-s s-1-size m-table src-x)
  (op nop (start S-compute-A-lower) () ())
  (op pointer-add () (d) ([reg res-x] [reg s-1-size]))
  (op pointer-add () (s) ([reg src-x] [reg s-1-size]))
  (op pointer-move () (v&w) ([reg m-table]))
  (load mem-part () x ([reg src-x]))
  (loop () (i [const 0] [reg l-s])
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op scale-op () (y) ([reg v] [reg x]))
    (load mem-part () x ([reg s]))
    (op pointer-add () (s) ([reg s] [const (- (size-of Fermion))]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (- (size-of Fermion))])))
  (op nop (end S-compute-A-lower) () ()))

(define (S-compute-A res-x l-s s-1-size p-table m-table src-x)
  (macro S-compute-A-upper [reg res-x]
                     	   [const 'qcd-fermion-lo]
                           [const 'qcd-scalef-lo]
                           [const 'qcd-maddf-lo]
                           [reg l-s] [reg s-1-size] [reg p-table] [reg src-x])
  (macro S-compute-A-lower [reg res-x]
                           [const 'qcd-fermion-hi]
                           [const 'qcd-scalef-hi]
                           [const 'qcd-maddf-hi]
                           [reg l-s] [reg s-1-size] [reg m-table] [reg src-x]))

(define (S-compute-A* res-x l-s s-1-size p-table m-table src-x)
  (macro S-compute-A-upper [reg res-x]
                           [const 'qcd-fermion-hi]
                           [const 'qcd-scalef-hi]
                           [const 'qcd-maddf-hi]
                           [reg l-s] [reg s-1-size] [reg p-table] [reg src-x])
  (macro S-compute-A-lower [reg res-x]
                           [const 'qcd-fermion-lo]
                           [const 'qcd-scalef-lo]
                           [const 'qcd-maddf-lo]
                           [reg l-s] [reg s-1-size] [reg m-table] [reg src-x]))

;;; a + Ab and a + A*b
(define (S-compute-add-A-upper res-x mem-part madd-op
                               l-s s-1-size sa-x p-table src-x)
  (op nop (start S-compute-A-upper) () ())
  (op pointer-add () (src-L) ([reg src-x] [reg s-1-size]))
  (op pointer-move () (d) ([reg res-x]))
  (op pointer-move () (a) ([reg sa-x]))
  (op pointer-move () (s) ([reg src-x]))
  (op pointer-move () (v&w) ([reg p-table]))
  (load mem-part () x ([reg src-L]))
  (loop () (i [const 0] [reg l-s])
    (load mem-part () q ([reg a]))
    (op pointer-add () (a) ([reg a] [const (size-of Fermion)]))
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op madd-op () (y) ([reg q] [reg v] [reg x]))
    (load mem-part () x ([reg s]))
    (op pointer-add () (s) ([reg s] [const (size-of Fermion)]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (size-of Fermion)])))
  (op nop (end S-compute-A-upper) () ()))

(define (S-compute-add-A-lower res-x mem-part madd-op
                               l-s s-1-size sa-x m-table src-x)
  (op nop (start S-compute-A-lower) () ())
  (op pointer-add () (d) ([reg res-x] [reg s-1-size]))
  (op pointer-add () (a) ([reg sa-x] [reg s-1-size]))
  (op pointer-add () (s) ([reg src-x] [reg s-1-size]))
  (op pointer-move () (v&w) ([reg m-table]))
  (load mem-part () x ([reg src-x]))
  (loop () (i [const 0] [reg l-s])
    (load mem-part () q ([reg a]))
    (op pointer-add () (a) ([reg a] [const (- (size-of Fermion))]))
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op madd-op () (y) ([reg q] [reg v] [reg x]))
    (load mem-part () x ([reg s]))
    (op pointer-add () (s) ([reg s] [const (- (size-of Fermion))]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (- (size-of Fermion))])))
  (op nop (end S-compute-A-lower) () ()))

(define (S-compute-add-A res-x l-s s-1-size sa-x p-table m-table src-x)
  (macro S-compute-add-A-upper [reg res-x]
                     	       [const 'qcd-fermion-lo]
                               [const 'qcd-maddf-lo]
                               [reg l-s] [reg s-1-size]
                               [reg sa-x] [reg p-table] [reg src-x])
  (macro S-compute-add-A-lower [reg res-x]
                               [const 'qcd-fermion-hi]
                               [const 'qcd-maddf-hi]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg m-table] [reg src-x]))

(define (S-compute-add-A* res-x l-s s-1-size sa-x p-table m-table src-x)
  (macro S-compute-add-A-upper [reg res-x]
                               [const 'qcd-fermion-hi]
                               [const 'qcd-maddf-hi]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg p-table] [reg src-x])
  (macro S-compute-add-A-lower [reg res-x]
                               [const 'qcd-fermion-lo]
                               [const 'qcd-maddf-lo]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg m-table] [reg src-x]))

(define (S-compute-sub-A res-x l-s s-1-size sa-x p-table m-table src-x)
  (macro S-compute-add-A-upper [reg res-x]
                     	       [const 'qcd-fermion-lo]
                               [const 'qcd-msubf-lo]
                               [reg l-s] [reg s-1-size]
                               [reg sa-x] [reg p-table] [reg src-x])
  (macro S-compute-add-A-lower [reg res-x]
                               [const 'qcd-fermion-hi]
                               [const 'qcd-msubf-hi]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg m-table] [reg src-x]))

(define (S-compute-sub-A* res-x l-s s-1-size sa-x p-table m-table src-x)
  (macro S-compute-add-A-upper [reg res-x]
                               [const 'qcd-fermion-hi]
                               [const 'qcd-msubf-hi]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg p-table] [reg src-x])
  (macro S-compute-add-A-lower [reg res-x]
                               [const 'qcd-fermion-lo]
                               [const 'qcd-msubf-lo]
                               [reg l-s] [reg s-1-size]
			       [reg sa-x] [reg m-table] [reg src-x]))

;;; a - A b and the norm of the result
(define (S-compute-add-A-norm-upper res-x res-norm mem-part madd-op norm-op
                                    l-s s-1-size src-ax p-table src-bx)
  (op nop (start S-compute-A-norm-upper) () ())
  (op pointer-add () (src-L) ([reg src-bx] [reg s-1-size]))
  (op pointer-move () (d) ([reg res-x]))
  (op pointer-move () (a) ([reg src-ax]))
  (op pointer-move () (b) ([reg src-bx]))
  (op pointer-move () (v&w) ([reg p-table]))
  (load mem-part () x ([reg src-L]))
  (loop () (i [const 0] [reg l-s])
    (load mem-part () q ([reg a]))
    (op pointer-add () (a) ([reg a] [const (size-of Fermion)]))
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op madd-op () (y) ([reg q] [reg v] [reg x]))
    (load mem-part () x ([reg b]))
    (op pointer-add () (b) ([reg b] [const (size-of Fermion)]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (op norm-op () (res-norm) ([reg res-norm] [reg z]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (size-of Fermion)])))
  (op nop (end S-compute-A-norm-upper) () ()))

(define (S-compute-add-A-norm-lower res-x res-norm mem-part madd-op norm-op
                                    l-s s-1-size src-ax m-table src-bx)
  (op nop (start S-compute-A-norm-lower) () ())
  (op pointer-add () (d) ([reg res-x] [reg s-1-size]))
  (op pointer-add () (a) ([reg src-ax] [reg s-1-size]))
  (op pointer-add () (b) ([reg src-bx] [reg s-1-size]))
  (op pointer-move () (v&w) ([reg m-table]))
  (load mem-part () x ([reg src-bx]))
  (loop () (i [const 0] [reg l-s])
    (load mem-part () q ([reg a]))
    (op pointer-add () (a) ([reg a] [const (- (size-of Fermion))]))
    (load double () v ([reg v&w] [const (offset-of AB-Table v)]))
    (load double () w ([reg v&w] [const (offset-of AB-Table w)]))
    (op pointer-add () (v&w) ([reg v&w] [const (size-of AB-Table)]))
    (op madd-op () (y) ([reg q] [reg v] [reg x]))
    (load mem-part () x ([reg b]))
    (op pointer-add () (b) ([reg b] [const (- (size-of Fermion))]))
    (op madd-op () (z) ([reg y] [reg w] [reg x]))
    (op norm-op () (res-norm) ([reg res-norm] [reg z]))
    (store mem-part () ([reg d]) [reg z])
    (op pointer-add () (d) ([reg d] [const (- (size-of Fermion))])))
  (op nop (end S-compute-A-norm-lower) () ()))

(define (S-compute-sub-A-norm res-x res-norm l-s s-1-size
                              src-ax p-table m-table src-bx)
  (macro S-compute-add-A-norm-upper [reg res-x] [reg res-norm]
                                    [const 'qcd-fermion-lo]
                                    [const 'qcd-msubf-lo]
				    [const 'qcd-fnorm-lo-add]
                                    [reg l-s] [reg s-1-size]
   				    [reg src-ax] [reg p-table] [reg src-bx])
  (macro S-compute-add-A-norm-lower [reg res-x] [reg res-norm]
                                    [const 'qcd-fermion-hi]
                                    [const 'qcd-msubf-hi]
				    [const 'qcd-fnorm-hi-add]
                                    [reg l-s] [reg s-1-size]
   				    [reg src-ax] [reg m-table] [reg src-bx]))

;;; Inverses of A and A*
(define (S-compute-1/A-upper res-x mem-part scale-op madd-op
                               l-s p-table src-x)
  (op nop (start S-compute-1/A-upper) () ())
  (op pointer-add () (t) ([reg p-table] [const (offset-of AB-Inverse abc)]))
  (load mem-part () q ([reg src-x]))
  (op pointer-add () (x) ([reg src-x] [const (size-of Fermion)]))
  (op pointer-add () (y) ([reg res-x] [const (size-of Fermion)]))
  (loop () (k [const 1] [reg l-s])
    (load double () a ([reg t] [const (offset-of abc a)]))
    (op pointer-add () (t) ([reg t] [const (size-of abc)]))
    (load mem-part () p ([reg x]))
    (op pointer-add () (x) ([reg x] [const (size-of Fermion)]))
    (store mem-part () ([reg y]) [reg p])
    (op pointer-add () (y) ([reg y] [const (size-of Fermion)]))
    (op madd-op () (q) ([reg q] [reg a] [reg p])))
  (load double () z ([reg p-table] [const (offset-of AB-Inverse z)]))
  (op scale-op () (zq) ([reg z] [reg q]))
  (store mem-part () ([reg res-x]) [reg zq])
  (op pointer-add () (r) ([reg res-x] [const (size-of Fermion)]))
  (op pointer-add () (t) ([reg p-table] [const (offset-of AB-Inverse abc)]))
  (loop () (k [const 1] [reg l-s])
    (load double () b ([reg t] [const (offset-of abc b)]))
    (load double () c ([reg t] [const (offset-of abc c)]))
    (op pointer-add () (t) ([reg t] [const (size-of abc)]))
    (op scale-op () (bq) ([reg b] [reg zq]))
    (load mem-part () p ([reg r]))
    (op madd-op () (zq) ([reg bq] [reg c] [reg p]))
    (store mem-part () ([reg r]) [reg zq])
    (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))
  (op nop (end S-compute-1/A-upper) () ()))

(define (S-compute-1/A-lower res-x mem-part scale-op madd-op 
                               l-s s-1-size m-table src-x)
  (op nop (start S-compute-1/A-lower) () ())
  (op pointer-add () (src-n) ([reg src-x] [reg s-1-size]))
  (load mem-part () q ([reg src-n]))
  (op pointer-move () (x) ([reg src-x]))
  (op pointer-move () (y) ([reg res-x]))
  (op pointer-add () (t) ([reg m-table] [const (offset-of AB-Inverse abc)]))
  (loop () (k [const 1] [reg l-s])
    (load double () a ([reg t] [const (offset-of abc a)]))
    (op pointer-add () (t) ([reg t] [const (size-of abc)]))
    (load mem-part () src-k ([reg x]))
    (op pointer-add () (x) ([reg x] [const (size-of Fermion)]))
    (store mem-part () ([reg y]) [reg src-k])
    (op pointer-add () (y) ([reg y] [const (size-of Fermion)]))
    (op madd-op () (q) ([reg q] [reg a] [reg src-k])))
  (load double () z ([reg m-table] [const (offset-of AB-Inverse z)]))
  (op scale-op () (zq) ([reg z] [reg q]))
  (store mem-part () ([reg y]) [reg zq])
  (op pointer-add () (x) ([reg y] [const (- (size-of Fermion))]))
  (op pointer-add () (t) ([reg t] [const (- (size-of abc))]))
  (loop () (k [const 1] [reg l-s])
    (load double () b ([reg t] [const (offset-of abc b)]))
    (load double () c ([reg t] [const (offset-of abc c)]))
    (op pointer-add () (t) ([reg t] [const (- (size-of abc))]))
    (op scale-op () (bq) ([reg b] [reg zq]))
    (load mem-part () p ([reg x]))
    (op madd-op () (zq) ([reg bq] [reg c] [reg p]))
    (store mem-part () ([reg x]) [reg zq])
    (op pointer-add () (x) ([reg x] [const (- (size-of Fermion))])))
  (op nop (end S-compute-1/A-lower) () ()))

(define (S-compute-1/A res-x l-s s-1-size p-table m-table src-x)
  (macro S-compute-1/A-upper [reg res-x]
                      	     [const 'qcd-fermion-lo]
                             [const 'qcd-scalef-lo]
                             [const 'qcd-maddf-lo]
                             [reg l-s] [reg p-table] [reg src-x])
  (macro S-compute-1/A-lower [reg res-x]
                             [const 'qcd-fermion-hi]
                             [const 'qcd-scalef-hi]
                             [const 'qcd-maddf-hi]
                             [reg l-s] [reg s-1-size]
                             [reg m-table] [reg src-x]))

(define (S-compute-1/A* res-x l-s s-1-size p-table m-table src-x)
  (macro S-compute-1/A-lower [reg res-x]
                             [const 'qcd-fermion-lo]
                             [const 'qcd-scalef-lo]
                             [const 'qcd-maddf-lo]
                             [reg l-s] [reg s-1-size]
                             [reg p-table] [reg src-x])
  (macro S-compute-1/A-upper [reg res-x]
                             [const 'qcd-fermion-hi]
                             [const 'qcd-scalef-hi]
                             [const 'qcd-maddf-hi]
                             [reg l-s]
                             [reg m-table] [reg src-x]))

